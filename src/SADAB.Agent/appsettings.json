{
  "Logging": {
    "LogLevel": {
      "Default": "Debug",
      "Microsoft.Hosting.Lifetime": "Information",
      "Microsoft.WebTools": "Warning"
    }
  },
  "AgentSettings": {
    "ServerUrl": "https://localhost:5001",
    "HeartbeatIntervalSeconds": 30,
    "DeploymentCheckIntervalSeconds": 60,
    "CommandCheckIntervalSeconds": 30,
    "InventoryCollectionIntervalMinutes": 1,
    "CertificateRefreshCheckIntervalMinutes": 1,
    "CertificateRefreshThresholdDays": 7,
    "WorkingDirectoryPath": "",
    "CertificateFileName": "agent.crt",
    "PrivateKeyFileName": "agent.key",
    "ConfigFileName": "config.json"
  },
  "DeploymentSettings": {
    "DefaultTimeoutMinutes": 5,
    "CleanupAfterExecution": true
  },
  "CommandSettings": {
    "DefaultTimeoutMinutes": 5,
    "MaxOutputLength": 10000
  },
  "ServiceSettings": {
    "ServiceName": "SADAB Agent",
    "CertificateHeaderName": "X-Client-Certificate-Thumbprint"
  },
  "PathSettings": {
    "ProgramDataFolder": "SADAB",
    "AgentSubFolder": "Agent",
    "DeploymentsSubFolder": "Deployments"
  },
  "ApiEndpoints": {
    "Register": "/api/agents/register",
    "Heartbeat": "/api/agents/heartbeat",
    "RefreshCertificate": "/api/agents/refresh-certificate",
    "PendingDeployments": "/api/deployments/pending",
    "DeploymentResults": "/api/deployments/{0}/results",
    "DeploymentFiles": "/api/deployments/files/{0}",
    "PendingCommands": "/api/commands/pending",
    "CommandResult": "/api/commands/{0}/result",
    "Inventory": "/api/inventory"
  },
  "ExecutableSettings": {
    "PowerShell": "powershell.exe",
    "PowerShellArgs": "-ExecutionPolicy Bypass -File",
    "CommandPrompt": "cmd.exe",
    "CommandPromptArgs": "/c"
  },
  "FileExtensions": {
    "PowerShell": ".ps1",
    "BatchScript": ".bat",
    "CommandScript": ".cmd"
  },
  "DefaultValues": {
    "Unknown": "Unknown"
  },
  "Messages": {
    "StartingAgent": "SADAB Agent starting...",
    "AgentStarted": "SADAB Agent started with ID: {0}",
    "RegistrationFailed": "Failed to register agent. Stopping service.",
    "HeartbeatSent": "Heartbeat sent",
    "InventorySubmitted": "Inventory data submitted",
    "CertificateExpiring": "Certificate expires in {0} days, refreshing...",
    "CertificateRefreshed": "Certificate refreshed successfully",
    "ErrorRegisteringAgent": "Error registering agent",
    "ErrorSendingHeartbeat": "Error sending heartbeat",
    "ErrorRefreshingCertificate": "Error refreshing certificate",
    "ErrorGettingPendingDeployments": "Error getting pending deployments",
    "ErrorUpdatingDeploymentResult": "Error updating deployment result",
    "ErrorDownloadingDeploymentFile": "Error downloading deployment file {0}",
    "ErrorGettingPendingCommands": "Error getting pending commands",
    "ErrorUpdatingCommandResult": "Error updating command result",
    "ErrorSubmittingInventory": "Error submitting inventory",
    "StartingDeployment": "Starting deployment {0}: {1}",
    "DownloadedFile": "Downloaded file: {0}",
    "UnsupportedDeploymentType": "Unsupported deployment type: {0}",
    "DeploymentCompleted": "Deployment {0} completed with status {1}",
    "ErrorExecutingDeployment": "Error executing deployment {0}",
    "ErrorCleanupDeploymentDirectory": "Error cleaning up deployment directory",
    "NoExecutableSpecified": "No executable specified",
    "NoPowerShellScriptSpecified": "No PowerShell script specified",
    "NoBatchScriptSpecified": "No batch script specified",
    "FilesCopiedTo": "Files copied to {0}",
    "DeploymentTimedOut": "Deployment timed out",
    "ExecutingCommand": "Executing command {0}: {1}",
    "CommandExecutionTimedOut": "Command execution timed out",
    "CommandCompleted": "Command {0} completed with status {1}",
    "ErrorExecutingCommand": "Error executing command {0}",
    "CollectingInventory": "Collecting inventory data",
    "ErrorCollectingInventory": "Error collecting inventory",
    "ErrorCollectingHardwareInfo": "Error collecting hardware info",
    "ErrorReadingRegistryPath": "Error reading registry path {0}",
    "ErrorCollectingInstalledSoftware": "Error collecting installed software",
    "ErrorCollectingEnvironmentVariables": "Error collecting environment variables",
    "ErrorCollectingRunningServices": "Error collecting running services",
    "InventoryNotImplementedForPlatform": "Inventory collection not implemented for this platform"
  }
}
